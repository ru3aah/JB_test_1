import logging

from telegram import Update
from telegram.ext import (ApplicationBuilder, CallbackQueryHandler,
                          ContextTypes, CommandHandler, MessageHandler, filters,
                          ConversationHandler)
from config import TG_TOKEN
from config import chat_gpt
from util import (load_message, send_text, send_image, show_main_menu,
                  default_callback_handler, load_prompt, send_text_buttons,
                  gpt_dialog)

# logging setup
logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - '
                           '%(message)s',
                    level=logging.DEBUG)
logging.getLogger('httpx').setLevel(logging.WARNING)
logger = logging.getLogger(__name__)


# Commands
# start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–≤–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    context.user_data['usr_choice'] = 'main'
    text = load_message(context.user_data['usr_choice'])
    await send_image(update, context, context.user_data['usr_choice'])
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì'
    })


# message handler
async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞"""
    match context.user_data.get('usr_choice'):
        case 'main':
            await start(update, context)
        case 'random':
            await start(update, context)
        case 'gpt':
            await gpt_dialog(update, context)
        case 'talk':
            await gpt_dialog(update, context)


# random fact
async def random_fact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    context.user_data['usr_choice'] = 'random'
    text = load_message(context.user_data['usr_choice'])
    await send_image(update, context, context.user_data['usr_choice'])
    await send_text(update, context, text)
    prompt = load_prompt(context.user_data['usr_choice'])
    answer = await (chat_gpt.send_question(prompt, ''))
    await send_text_buttons(update, context, answer,
                            context.user_data['usr_choice']
                            )


# CallbackHandler –¥–ª—è –º–µ–Ω—é random_fact
async def random_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –º–µ–Ω—é random_fact"""
    if context.user_data.get('usr_choice') != 'random':
        return
    await update.callback_query.answer()
    await random_fact(update, context)


# gpt talk
async def gpt_talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–≥–æ–≤–æ—Ä —Å gpt –Ω–∞—á–∞–ª–æ"""
    context.user_data['usr_choice'] = 'gpt'
    text = load_message(context.user_data.get('usr_choice'))
    await send_image(update, context, context.user_data.get('usr_choice'))
    await send_text(update, context, text)
    prompt = load_prompt(context.user_data.get('usr_choice'))
    chat_gpt.set_prompt(prompt)


# talk to the famous person
async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–∞–∑–≥–æ–≤–æ—Ä —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º –Ω–∞—á–∞–ª–æ"""
    context.user_data['usr_choice'] = 'talk'
    text = load_message(context.user_data['usr_choice'])
    await send_image(update, context, context.user_data['usr_choice'])
    await send_text_buttons(update, context, text,
                            context.user_data['usr_choice']
                            )


# CallbackHandler –¥–ª—è –º–µ–Ω—é talk
async def talk_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ –†–∞–∑–≥–æ–≤–æ—Ä —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º —á–µ–ª–æ–≤–µ–∫–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫"""
    if context.user_data['usr_choice'] != 'talk':
        return
    await update.callback_query.answer()
    data = update.callback_query.data
    chat_gpt.set_prompt(load_prompt(data))
    await send_image(update, context, data)
    greet = await chat_gpt.add_message('–ü–æ–∑–¥–æ—Ä–æ–≤–∞–π—Å—è —Å–æ –º–Ω–æ–π')
    await send_text(update, context, greet)


# stop
async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop"""
    context.user_data.clear()
    await update.callback_query.answer()
    await start(update, context)


app = ApplicationBuilder().token(TG_TOKEN).build()

# Command Handlers
app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random_fact))
app.add_handler(CommandHandler('gpt', gpt_talk))
app.add_handler(CommandHandler('talk', talk))

# Callback Handlers
app.add_handler(CallbackQueryHandler(random_buttons, pattern='random_more'))
app.add_handler(CallbackQueryHandler(talk_buttons, pattern='^talk_.*'))
app.add_handler(CallbackQueryHandler(stop, pattern='stop'))

# Conversation handler for quiz command
CHOOSE_THEME, ASK_QUESTION, HANDLE_ANSWER, MENU_OPTIONS = range(4)


# Quiz functions
async def start_quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–∏–Ω–∏—Ü–∏–∞—Ü–∏—è –∫–≤–∏–∑–∞"""
    context.user_data['usr_choice'] = 'quiz'
    context.user_data['prompt'] = load_prompt(context.user_data['usr_choice'])
    context.user_data['score'] = 0
    context.user_data['questions'] = 0
    await send_image(update, context, context.user_data['usr_choice'])
    await ask_theme(update, context)
    return CHOOSE_THEME


# –ó–∞–ø—Ä–æ—Å —Ç–µ–º—ã
async def ask_theme(update, context):
    """–í—ã–≤–æ–¥–∏—Ç –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –∫–≤–∏–∑–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ —Ç–µ–º"""
    await send_text_buttons(update, context,
                            load_message(context.user_data['usr_choice']),
                            context.user_data['usr_choice']
                            )
    return CHOOSE_THEME


# –í—ã–±–æ—Ä —Ç–µ–º—ã
async def choose_theme(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–µ–º—ã """
    await update.callback_query.answer()
    context.user_data['chosen_theme'] = update.callback_query.data
    await ask_question(update, context)
    return HANDLE_ANSWER


# –ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –Ω–∞ —Ç–µ–º—É
async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏ –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å"""
    question = await chat_gpt.send_question(context.user_data['prompt'],
                                            context.user_data['chosen_theme']
                                            )
    context.user_data['questions'] += 1
    await send_text(update, context, question)
    return HANDLE_ANSWER


# –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –ø–æ–ª—É—á–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –æ—Ç GPT, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç, —á—Ç–æ –¥–∞–ª—å—à–µ
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –∏ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±–æ—Ä –¥–∞–ª—å—à–µ"""
    user_answer = update.message.text
    evaluation_message = await chat_gpt.add_message(user_answer)
    if "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!" in evaluation_message:
        context.user_data['score'] += 1
    await send_text(update, context, evaluation_message)
    await send_text_buttons(update, context,
                            f'–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: '
                            f'{context.user_data['score']} –∏–∑ '
                            f'{context.user_data['questions']}\n'
                            '–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?',
                            'quiz_answer_options')
    return MENU_OPTIONS


# –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
async def menu_options(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∫–≤–∏–∑–∞"""
    await update.callback_query.answer()
    selected_option = update.callback_query.data
    if selected_option == 'quiz_more':
        return await ask_question(update, context)
    elif selected_option == 'quiz_change':
        return await ask_theme(update, context)
    await send_text(update, context, '–°–ø–∞—Å–∏–±–æ –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤ –∫–≤–∏–∑–µ!')
    context.user_data.clear()
    await start(update, context)
    return ConversationHandler.END


# quiz –°onversationHandler —Å–æ—Å—Ç–æ—è–Ω–∏—è
app.add_handler(ConversationHandler(
    entry_points=[CommandHandler('quiz', start_quiz)],
    states={
        CHOOSE_THEME: [CallbackQueryHandler(choose_theme, pattern='^quiz_.*'),
                       CallbackQueryHandler(ask_theme, pattern='^quiz_.*')
                       ],
        ASK_QUESTION: [MessageHandler(filters.TEXT & ~filters.COMMAND,
                                      ask_question)],
        HANDLE_ANSWER: [MessageHandler(filters.TEXT & ~filters.COMMAND,
                                       handle_answer),
                        CallbackQueryHandler(menu_options, pattern='^quiz_.*')
                        ],
        MENU_OPTIONS: [CallbackQueryHandler(menu_options, pattern='^quiz_.*')]
    },
    fallbacks=[CommandHandler('stop', stop)]))

#Message Handler
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND,
                               message_handler))

#Default CallBack handler
app.add_handler(CallbackQueryHandler(default_callback_handler))

app.run_polling()
